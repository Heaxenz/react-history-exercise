{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { Component, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\nconst JokeListt = ({\n  numJokesToGet = 5\n}) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  /* retrieve jokes from API */\n  useEffect(() => {\n    async function getJokes() {\n      let jok = [...jokes];\n      let seenJokes = new Set();\n      while (jok.length < numJokesToGet) {\n        let res = await axios.get('https//icanhazdadjoke.com', {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        let {\n          ...jokeobj\n        } = res.data;\n      }\n    }\n  }, []);\n};\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n_s(JokeListt, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\n_c = JokeListt;\nexport default JokeListt;\nvar _c;\n$RefreshReg$(_c, \"JokeListt\");","map":{"version":3,"names":["React","Component","useEffect","useState","axios","Joke","JokeListt","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","jok","seenJokes","Set","length","res","get","headers","Accept","jokeobj","data","_c","$RefreshReg$"],"sources":["/Users/heaxenz/School/section-28/react-history-exercise/src/JokeListt.js"],"sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n\n/** List of jokes. */\n\nconst JokeListt = ({numJokesToGet = 5}) => {\n    const [jokes, setJokes] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    \n    /* retrieve jokes from API */\n    useEffect(() => {\n        async function getJokes() {\n            let jok = [...jokes];\n            let seenJokes = new Set();\n            \n                while(jok.length < numJokesToGet){\n                    let res = await axios.get('https//icanhazdadjoke.com', {\n                        headers: { Accept: 'application/json'}\n                    });\n                    let { ...jokeobj} = res.data\n                }\n            \n        }\n    }, [])\n       \n}\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\nexport default JokeListt;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;;AAGvB;;AAEA,MAAMC,SAAS,GAAGA,CAAC;EAACC,aAAa,GAAG;AAAC,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAGhD;EACAD,SAAS,CAAC,MAAM;IACZ,eAAeW,QAAQA,CAAA,EAAG;MACtB,IAAIC,GAAG,GAAG,CAAC,GAAGL,KAAK,CAAC;MACpB,IAAIM,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAErB,OAAMF,GAAG,CAACG,MAAM,GAAGV,aAAa,EAAC;QAC7B,IAAIW,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,2BAA2B,EAAE;UACnDC,OAAO,EAAE;YAAEC,MAAM,EAAE;UAAkB;QACzC,CAAC,CAAC;QACF,IAAI;UAAE,GAAGC;QAAO,CAAC,GAAGJ,GAAG,CAACK,IAAI;MAChC;IAER;EACJ,CAAC,EAAE,EAAE,CAAC;AAEV,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAf,EAAA,CAlGMF,SAAS;AAAAkB,EAAA,GAATlB,SAAS;AAoGf,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}